classdef KEYSIGHT < Analysers.Analyser
    methods
        function obj = KEYSIGHT(~,args)
            obj.prop = args;
        end

        function startUp(obj)
            anl = tcpclient( obj.prop('ip'), double(obj.prop('port')) );
            writeline(anl, ['' ...
                '*CLS;' ...
                ':INSTrument SA;' ...
                ':FORMat:DATA REAL;' ...
                ':AVERage:TYPE VOLT;' ...
                ':SYSTem:CONFigure:GPS 1'])
            res = writeread(anl, "SYSTEM:ERROR?");
            if ~contains(res, "No error", "IgnoreCase", true)
                warning("KEYSIGHT: StartUp: " + res)
            else
                disp("KEYSIGHT: Start Ok.")
            end
         end

        function out = getParms(obj)
             keys = [
                "FStart"...
                "FStop"...
                "ResAuto"...
                "Res"...
                "AttAuto"...
                "Att"...
                "SweepTime"...
                "VBW" ];
            res = obj.getCMD("" + ...
                ":FREQuency:STARt?;" + ...
                ":FREQuency:STOP?;" + ...
                ":BANDwidth:RESolution:AUTO?;" + ...
                ":BANDwidth:RESolution?;" + ...
                ":POWer:RF:ATTenuation:AUTO?;" + ...
                ":POWer:RF:ATTenuation?;" + ...
                ":SWEep:TIME?;" + ...
                ":BANDwidth:VIDeo?");
            data = strsplit(res.', ';');
            out = dictionary(keys, data);
        end

        function preAmp(obj, state)
            if (contains(state, "On", "IgnoreCase", true)) || (contains(state, "1"))
                obj.sendCMD("POW:GAIN:AUTO ON");
            else
                obj.sendCMD("POW:GAIN:AUTO OFF");
            end
        end

        % TODO: A implementar (sÃ£o diferentes entres os modelos)
        % function value = getMarker(obj, freq, trace)
        % function data = getTrace(obj, trace)

    end
end